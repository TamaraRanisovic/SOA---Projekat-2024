// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: users/userservice.proto

package users

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	UserService_AuthenticateGuide_FullMethodName        = "/UserService/AuthenticateGuide"
	UserService_GetUserByToken_FullMethodName           = "/UserService/GetUserByToken"
	UserService_BlockAccount_FullMethodName             = "/UserService/BlockAccount"
	UserService_GetByUsernameAndPassword_FullMethodName = "/UserService/GetByUsernameAndPassword"
	UserService_GetByUsername_FullMethodName            = "/UserService/GetByUsername"
	UserService_GetAccount_FullMethodName               = "/UserService/GetAccount"
	UserService_GetAllAccounts_FullMethodName           = "/UserService/GetAllAccounts"
	UserService_CreateAccount_FullMethodName            = "/UserService/CreateAccount"
)

// UserServiceClient is the client API for UserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserServiceClient interface {
	AuthenticateGuide(ctx context.Context, in *TokenRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetUserByToken(ctx context.Context, in *TokenRequest, opts ...grpc.CallOption) (*UserIdResponse, error)
	BlockAccount(ctx context.Context, in *AccountIdRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetByUsernameAndPassword(ctx context.Context, in *Credentials, opts ...grpc.CallOption) (*AccountDetailResponse, error)
	GetByUsername(ctx context.Context, in *UsernameRequest, opts ...grpc.CallOption) (*AccountDetailResponse, error)
	GetAccount(ctx context.Context, in *UserIdRequest, opts ...grpc.CallOption) (*AccountDetailResponse, error)
	GetAllAccounts(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*AccountsResponse, error)
	CreateAccount(ctx context.Context, in *AccountDetailResponse, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type userServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserServiceClient(cc grpc.ClientConnInterface) UserServiceClient {
	return &userServiceClient{cc}
}

func (c *userServiceClient) AuthenticateGuide(ctx context.Context, in *TokenRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, UserService_AuthenticateGuide_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetUserByToken(ctx context.Context, in *TokenRequest, opts ...grpc.CallOption) (*UserIdResponse, error) {
	out := new(UserIdResponse)
	err := c.cc.Invoke(ctx, UserService_GetUserByToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) BlockAccount(ctx context.Context, in *AccountIdRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, UserService_BlockAccount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetByUsernameAndPassword(ctx context.Context, in *Credentials, opts ...grpc.CallOption) (*AccountDetailResponse, error) {
	out := new(AccountDetailResponse)
	err := c.cc.Invoke(ctx, UserService_GetByUsernameAndPassword_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetByUsername(ctx context.Context, in *UsernameRequest, opts ...grpc.CallOption) (*AccountDetailResponse, error) {
	out := new(AccountDetailResponse)
	err := c.cc.Invoke(ctx, UserService_GetByUsername_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetAccount(ctx context.Context, in *UserIdRequest, opts ...grpc.CallOption) (*AccountDetailResponse, error) {
	out := new(AccountDetailResponse)
	err := c.cc.Invoke(ctx, UserService_GetAccount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetAllAccounts(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*AccountsResponse, error) {
	out := new(AccountsResponse)
	err := c.cc.Invoke(ctx, UserService_GetAllAccounts_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) CreateAccount(ctx context.Context, in *AccountDetailResponse, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, UserService_CreateAccount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServiceServer is the server API for UserService service.
// All implementations must embed UnimplementedUserServiceServer
// for forward compatibility
type UserServiceServer interface {
	AuthenticateGuide(context.Context, *TokenRequest) (*emptypb.Empty, error)
	GetUserByToken(context.Context, *TokenRequest) (*UserIdResponse, error)
	BlockAccount(context.Context, *AccountIdRequest) (*emptypb.Empty, error)
	GetByUsernameAndPassword(context.Context, *Credentials) (*AccountDetailResponse, error)
	GetByUsername(context.Context, *UsernameRequest) (*AccountDetailResponse, error)
	GetAccount(context.Context, *UserIdRequest) (*AccountDetailResponse, error)
	GetAllAccounts(context.Context, *emptypb.Empty) (*AccountsResponse, error)
	CreateAccount(context.Context, *AccountDetailResponse) (*emptypb.Empty, error)
	mustEmbedUnimplementedUserServiceServer()
}

// UnimplementedUserServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUserServiceServer struct {
}

func (UnimplementedUserServiceServer) AuthenticateGuide(context.Context, *TokenRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthenticateGuide not implemented")
}
func (UnimplementedUserServiceServer) GetUserByToken(context.Context, *TokenRequest) (*UserIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserByToken not implemented")
}
func (UnimplementedUserServiceServer) BlockAccount(context.Context, *AccountIdRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BlockAccount not implemented")
}
func (UnimplementedUserServiceServer) GetByUsernameAndPassword(context.Context, *Credentials) (*AccountDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByUsernameAndPassword not implemented")
}
func (UnimplementedUserServiceServer) GetByUsername(context.Context, *UsernameRequest) (*AccountDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByUsername not implemented")
}
func (UnimplementedUserServiceServer) GetAccount(context.Context, *UserIdRequest) (*AccountDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccount not implemented")
}
func (UnimplementedUserServiceServer) GetAllAccounts(context.Context, *emptypb.Empty) (*AccountsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllAccounts not implemented")
}
func (UnimplementedUserServiceServer) CreateAccount(context.Context, *AccountDetailResponse) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAccount not implemented")
}
func (UnimplementedUserServiceServer) mustEmbedUnimplementedUserServiceServer() {}

// UnsafeUserServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServiceServer will
// result in compilation errors.
type UnsafeUserServiceServer interface {
	mustEmbedUnimplementedUserServiceServer()
}

func RegisterUserServiceServer(s grpc.ServiceRegistrar, srv UserServiceServer) {
	s.RegisterService(&UserService_ServiceDesc, srv)
}

func _UserService_AuthenticateGuide_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).AuthenticateGuide(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_AuthenticateGuide_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).AuthenticateGuide(ctx, req.(*TokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetUserByToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetUserByToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetUserByToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetUserByToken(ctx, req.(*TokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_BlockAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).BlockAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_BlockAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).BlockAccount(ctx, req.(*AccountIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetByUsernameAndPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Credentials)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetByUsernameAndPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetByUsernameAndPassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetByUsernameAndPassword(ctx, req.(*Credentials))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetByUsername_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UsernameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetByUsername(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetByUsername_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetByUsername(ctx, req.(*UsernameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetAccount(ctx, req.(*UserIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetAllAccounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetAllAccounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetAllAccounts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetAllAccounts(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_CreateAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountDetailResponse)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).CreateAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_CreateAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).CreateAccount(ctx, req.(*AccountDetailResponse))
	}
	return interceptor(ctx, in, info, handler)
}

// UserService_ServiceDesc is the grpc.ServiceDesc for UserService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "UserService",
	HandlerType: (*UserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AuthenticateGuide",
			Handler:    _UserService_AuthenticateGuide_Handler,
		},
		{
			MethodName: "GetUserByToken",
			Handler:    _UserService_GetUserByToken_Handler,
		},
		{
			MethodName: "BlockAccount",
			Handler:    _UserService_BlockAccount_Handler,
		},
		{
			MethodName: "GetByUsernameAndPassword",
			Handler:    _UserService_GetByUsernameAndPassword_Handler,
		},
		{
			MethodName: "GetByUsername",
			Handler:    _UserService_GetByUsername_Handler,
		},
		{
			MethodName: "GetAccount",
			Handler:    _UserService_GetAccount_Handler,
		},
		{
			MethodName: "GetAllAccounts",
			Handler:    _UserService_GetAllAccounts_Handler,
		},
		{
			MethodName: "CreateAccount",
			Handler:    _UserService_CreateAccount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "users/userservice.proto",
}
