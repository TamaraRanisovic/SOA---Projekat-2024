syntax = "proto3";

option go_package = "proto/users";

import "google/protobuf/empty.proto";
import "google/api/annotations.proto";

service UserService {
  rpc AuthenticateGuide (TokenRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/authenticate_guide"
      body: "*"
    };
  }

  rpc GetUserByToken (TokenRequest) returns (UserIdResponse) {
    option (google.api.http) = {
      post: "/get_user_by_token"
      body: "*"
    };
  }

  rpc BlockAccount (AccountIdRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/block_account"
      body: "*"
    };
  }

  rpc GetByUsernameAndPassword (Credentials) returns (AccountDetailResponse) {
    option (google.api.http) = {
      post: "/get_by_username_password"
      body: "*"
    };
  }

  rpc GetByUsername (UsernameRequest) returns (AccountDetailResponse) {
    option (google.api.http) = {
      post: "/get_by_username"
      body: "*"
    };
  }

  rpc GetAccount (UserIdRequest) returns (AccountDetailResponse) {
    option (google.api.http) = {
      post: "/get_account"
      body: "*"
    };
  }

  rpc GetAllAccounts (google.protobuf.Empty) returns (AccountsResponse) {
    option (google.api.http) = {
      get: "/get_all_accounts"
    };
  }

  rpc CreateAccount (AccountDetailResponse) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/create_account"
      body: "*"
    };
  }
}


message TokenRequest {
  string token = 1;
}

message UserIdResponse {
  string id = 1;
}

message AccountIdRequest {
  string id = 1;
}

message UsernameRequest {
  string username = 1;
}

message Credentials {
  string username = 1;
  string password = 2;
}

message AccountDetailResponse {
  string id = 1;
  string username = 2;
  string email = 3;
  int32 role = 4;
  bool isblocked = 5;
  UserDetail user = 6;
}

message UserDetail {
  string id = 1;
  string name = 2;
  string surname = 3;
  string picture = 4;
  string biography = 5;
  string moto = 6;
}

message AccountsResponse {
  repeated AccountDetailResponse accounts = 1;
}

message UserIdRequest {
  string id = 1;
}
